In my inventory class I use the Single Responsibility Principle throughout the class. Instead of having a method in the store class that generates items, adds them to a list, and removes money; I have these all split up into single minded methods that are good at doing one specific task. I also use this principle to “get” member variables values so I can keep them private.

There are multiple classes where I use the Open/Closed Principle, such as in my store and customer classes. In my store class, if there was ever a need to add more items or change prices, it would be as easy as adding another option in the menu and then adding another create item function in the inventory class. In my customer class, there are many different methods that create situations where the customer buying chance is affected. If you wanted to add more variables that affected buying chance, the function would not have to be modified. You would only have to add those extra parameters inside of the preexisting functions.